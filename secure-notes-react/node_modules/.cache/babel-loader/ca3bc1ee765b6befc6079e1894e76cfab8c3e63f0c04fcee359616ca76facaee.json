{"ast":null,"code":"import axios from \"axios\";\nconsole.log(\"API URL:\", process.env.REACT_APP_API_URL);\n\n// Create an Axios instance\nconst api = axios.create({\n  baseURL: `${process.env.REACT_APP_API_URL}/api`,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  },\n  withCredentials: true\n});\n\n// Add a request interceptor to include JWT and CSRF tokens\napi.interceptors.request.use(async config => {\n  const token = localStorage.getItem(\"JWT_TOKEN\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  let csrfToken = localStorage.getItem(\"CSRF_TOKEN\");\n  if (!csrfToken) {\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/csrf-token`, {\n        withCredentials: true\n      });\n      csrfToken = response.data.token;\n      localStorage.setItem(\"CSRF_TOKEN\", csrfToken);\n    } catch (error) {\n      console.error(\"Failed to fetch CSRF token\", error);\n    }\n  }\n  if (csrfToken) {\n    config.headers[\"X-XSRF-TOKEN\"] = csrfToken;\n  }\n  console.log(\"X-XSRF-TOKEN \" + csrfToken);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","console","log","process","env","REACT_APP_API_URL","api","create","baseURL","headers","Accept","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","csrfToken","response","get","data","setItem","error","Promise","reject"],"sources":["C:/Users/Fujitsu/Desktop/Notes-App/secure-notes-react/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconsole.log(\"API URL:\", process.env.REACT_APP_API_URL);\r\n\r\n// Create an Axios instance\r\nconst api = axios.create({\r\n  baseURL: `${process.env.REACT_APP_API_URL}/api`,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    Accept: \"application/json\",\r\n  },\r\n  withCredentials: true,\r\n});\r\n\r\n// Add a request interceptor to include JWT and CSRF tokens\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    const token = localStorage.getItem(\"JWT_TOKEN\");\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    let csrfToken = localStorage.getItem(\"CSRF_TOKEN\");\r\n    if (!csrfToken) {\r\n      try {\r\n        const response = await axios.get(\r\n          `${process.env.REACT_APP_API_URL}/api/csrf-token`,\r\n          { withCredentials: true }\r\n        );\r\n        csrfToken = response.data.token;\r\n        localStorage.setItem(\"CSRF_TOKEN\", csrfToken);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch CSRF token\", error);\r\n      }\r\n    }\r\n\r\n    if (csrfToken) {\r\n      config.headers[\"X-XSRF-TOKEN\"] = csrfToken;\r\n    }\r\n    console.log(\"X-XSRF-TOKEN \" + csrfToken);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzBC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAC;;AAEtD;AACA,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAM,CAAC;EACvBC,OAAO,EAAG,GAAEL,OAAO,CAACC,GAAG,CAACC,iBAAkB,MAAK;EAC/CI,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE;EACV,CAAC;EACDC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAL,GAAG,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1B,MAAOC,MAAM,IAAK;EAChB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACN,OAAO,CAACU,aAAa,GAAI,UAASH,KAAM,EAAC;EAClD;EAEA,IAAII,SAAS,GAAGH,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAClD,IAAI,CAACE,SAAS,EAAE;IACd,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAC7B,GAAEnB,OAAO,CAACC,GAAG,CAACC,iBAAkB,iBAAgB,EACjD;QAAEM,eAAe,EAAE;MAAK,CAC1B,CAAC;MACDS,SAAS,GAAGC,QAAQ,CAACE,IAAI,CAACP,KAAK;MAC/BC,YAAY,CAACO,OAAO,CAAC,YAAY,EAAEJ,SAAS,CAAC;IAC/C,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdxB,OAAO,CAACwB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF;EAEA,IAAIL,SAAS,EAAE;IACbL,MAAM,CAACN,OAAO,CAAC,cAAc,CAAC,GAAGW,SAAS;EAC5C;EACAnB,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGkB,SAAS,CAAC;EACxC,OAAOL,MAAM;AACf,CAAC,EACAU,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAenB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}