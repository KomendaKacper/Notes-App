{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fujitsu\\\\Desktop\\\\Notes-App\\\\secure-notes-react\\\\src\\\\components\\\\AuditLogs\\\\AuditLogsDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport api from \"../../services/api\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { Blocks } from \"react-loader-spinner\";\nimport Errors from \"../Errors.js\";\nimport moment from \"moment\";\n\n//importing the the columns from the auditlogs\nimport { auditLogscolumn } from \"../../utils/tableColumn.js\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AuditLogsDetails = () => {\n  _s();\n  //access the notid\n  const {\n    noteId\n  } = useParams();\n  const [auditLogs, setAuditLogs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchSingleAuditLogs = useCallback(async () => {\n    setLoading(true);\n    try {\n      const {\n        data\n      } = await api.get(`/audit/note/${noteId}`);\n      setAuditLogs(data);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message);\n      console.log(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [noteId]);\n  useEffect(() => {\n    if (noteId) {\n      fetchSingleAuditLogs();\n    }\n  }, [noteId, fetchSingleAuditLogs]);\n  const rows = auditLogs.map(item => {\n    const formattedDate = moment(item.timestamp).format(\"MMMM DD, YYYY, hh:mm A\");\n\n    //set the data for each rows in the table according to the field name in columns\n    //Example: username is the keyword in row it should matche with the field name in column so that the data will show on that column dynamically\n\n    return {\n      id: item.id,\n      noteId: item.noteId,\n      actions: item.action,\n      username: item.username,\n      timestamp: formattedDate,\n      noteid: item.noteId,\n      note: item.noteContent\n    };\n  });\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Errors, {\n      message: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"py-6\",\n      children: auditLogs.length > 0 && /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center sm:text-2xl text-lg font-bold text-slate-800 \",\n        children: [\"Audit Log for Note ID - \", noteId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex  flex-col justify-center items-center  h-72\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(Blocks, {\n            height: \"70\",\n            width: \"70\",\n            color: \"#4fa94d\",\n            ariaLabel: \"blocks-loading\",\n            wrapperStyle: {},\n            wrapperClass: \"blocks-wrapper\",\n            visible: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Please wait...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [auditLogs.length === 0 ? /*#__PURE__*/_jsxDEV(Errors, {\n        message: \"Invalid NoteId\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto w-full\",\n          children: /*#__PURE__*/_jsxDEV(DataGrid, {\n            className: \"w-fit mx-auto px-0\",\n            rows: rows,\n            columns: auditLogscolumn,\n            initialState: {\n              pagination: {\n                paginationModel: {\n                  pageSize: 6\n                }\n              }\n            },\n            disableRowSelectionOnClick: true,\n            pageSizeOptions: [6],\n            disableColumnResize: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), \" \"]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(AuditLogsDetails, \"J7C3xLmByht0R2uC8yr/6o4KTD0=\", false, function () {\n  return [useParams];\n});\n_c = AuditLogsDetails;\nexport default AuditLogsDetails;\nvar _c;\n$RefreshReg$(_c, \"AuditLogsDetails\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","useParams","api","DataGrid","Blocks","Errors","moment","auditLogscolumn","jsxDEV","_jsxDEV","Fragment","_Fragment","AuditLogsDetails","_s","noteId","auditLogs","setAuditLogs","loading","setLoading","error","setError","fetchSingleAuditLogs","data","get","err","_err$response","_err$response$data","response","message","console","log","rows","map","item","formattedDate","timestamp","format","id","actions","action","username","noteid","note","noteContent","fileName","_jsxFileName","lineNumber","columnNumber","className","children","length","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","columns","initialState","pagination","paginationModel","pageSize","disableRowSelectionOnClick","pageSizeOptions","disableColumnResize","_c","$RefreshReg$"],"sources":["C:/Users/Fujitsu/Desktop/Notes-App/secure-notes-react/src/components/AuditLogs/AuditLogsDetails.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport api from \"../../services/api\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { Blocks } from \"react-loader-spinner\";\r\nimport Errors from \"../Errors.js\";\r\nimport moment from \"moment\";\r\n\r\n//importing the the columns from the auditlogs\r\nimport { auditLogscolumn } from \"../../utils/tableColumn.js\";\r\n\r\nconst AuditLogsDetails = () => {\r\n  //access the notid\r\n  const { noteId } = useParams();\r\n  const [auditLogs, setAuditLogs] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchSingleAuditLogs = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const { data } = await api.get(`/audit/note/${noteId}`);\r\n\r\n      setAuditLogs(data);\r\n    } catch (err) {\r\n      setError(err?.response?.data?.message);\r\n      console.log(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [noteId]);\r\n\r\n  useEffect(() => {\r\n    if (noteId) {\r\n      fetchSingleAuditLogs();\r\n    }\r\n  }, [noteId, fetchSingleAuditLogs]);\r\n\r\n  const rows = auditLogs.map((item) => {\r\n    const formattedDate = moment(item.timestamp).format(\r\n      \"MMMM DD, YYYY, hh:mm A\"\r\n    );\r\n\r\n    //set the data for each rows in the table according to the field name in columns\r\n    //Example: username is the keyword in row it should matche with the field name in column so that the data will show on that column dynamically\r\n\r\n    return {\r\n      id: item.id,\r\n      noteId: item.noteId,\r\n      actions: item.action,\r\n      username: item.username,\r\n      timestamp: formattedDate,\r\n      noteid: item.noteId,\r\n      note: item.noteContent,\r\n    };\r\n  });\r\n\r\n  if (error) {\r\n    return <Errors message={error} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <div className=\"py-6\">\r\n        {auditLogs.length > 0 && (\r\n          <h1 className=\"text-center sm:text-2xl text-lg font-bold text-slate-800 \">\r\n            Audit Log for Note ID - {noteId}\r\n          </h1>\r\n        )}\r\n      </div>\r\n      {loading ? (\r\n        <>\r\n          {\" \"}\r\n          <div className=\"flex  flex-col justify-center items-center  h-72\">\r\n            <span>\r\n              <Blocks\r\n                height=\"70\"\r\n                width=\"70\"\r\n                color=\"#4fa94d\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                visible={true}\r\n              />\r\n            </span>\r\n            <span>Please wait...</span>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {auditLogs.length === 0 ? (\r\n            <Errors message=\"Invalid NoteId\" />\r\n          ) : (\r\n            <>\r\n              {\" \"}\r\n              <div className=\"overflow-x-auto w-full\">\r\n                <DataGrid\r\n                  className=\"w-fit mx-auto px-0\"\r\n                  rows={rows}\r\n                  columns={auditLogscolumn}\r\n                  initialState={{\r\n                    pagination: {\r\n                      paginationModel: {\r\n                        pageSize: 6,\r\n                      },\r\n                    },\r\n                  }}\r\n                  disableRowSelectionOnClick\r\n                  pageSizeOptions={[6]}\r\n                  disableColumnResize\r\n                />\r\n              </div>\r\n            </>\r\n          )}{\" \"}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuditLogsDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}