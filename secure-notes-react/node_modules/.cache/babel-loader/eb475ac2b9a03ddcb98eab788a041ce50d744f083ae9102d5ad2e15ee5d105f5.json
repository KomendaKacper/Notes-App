{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fujitsu\\\\Desktop\\\\Notes-App\\\\secure-notes-react\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { useMyContext } from \"../store/ContextApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  adminPage\n}) => {\n  _s();\n  // Access the token and isAdmin state by using the useMyContext hook from the ContextProvider\n  const {\n    token,\n    isAdmin\n  } = useMyContext();\n\n  //navigate to login page to an unauthenticated\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n\n  //navigate to access-denied page if a user try to access the admin page\n  if (token && adminPage && !isAdmin) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/access-denied\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n};\n_s(ProtectedRoute, \"1e1Z20Qgeb2qlfvZrRn4/y6WpS8=\", false, function () {\n  return [useMyContext];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\n\n// USING LOCAL STORAGE OPTION FOR OAUTH ISSUE SINCE IT WAS NOT GETTING REDIRECTED.\n// import React from \"react\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ProtectedRoute = ({ children, adminPage = false }) => {\n//   const token = localStorage.getItem('JWT_TOKEN');\n//   const user = JSON.parse(localStorage.getItem('USER'));\n\n//   console.log(\"ProtectedRoute: Token:\", token);\n//   console.log(\"ProtectedRoute: User:\", user);\n\n//   if (!token) {\n//     console.log(\"ProtectedRoute: No token found, redirecting to login\");\n//     return <Navigate to=\"/login\" />;\n//   }\n\n//   if (adminPage && (!user || !user.roles.includes('ADMIN'))) {\n//     console.log(\"ProtectedRoute: User does not have admin rights, redirecting to access denied\");\n//     return <Navigate to=\"/access-denied\" />;\n//   }\n\n//   console.log(\"ProtectedRoute: Access granted to protected route\");\n//   return children;\n// };\n\n// export default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useMyContext","jsxDEV","_jsxDEV","ProtectedRoute","children","adminPage","_s","token","isAdmin","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Fujitsu/Desktop/Notes-App/secure-notes-react/src/components/ProtectedRoute.js"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useMyContext } from \"../store/ContextApi\";\r\n\r\nconst ProtectedRoute = ({ children, adminPage }) => {\r\n  // Access the token and isAdmin state by using the useMyContext hook from the ContextProvider\r\n  const { token, isAdmin } = useMyContext();\r\n\r\n  //navigate to login page to an unauthenticated\r\n  if (!token) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  //navigate to access-denied page if a user try to access the admin page\r\n  if (token && adminPage && !isAdmin) {\r\n    return <Navigate to=\"/access-denied\" />;\r\n  }\r\n\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n\r\n\r\n// USING LOCAL STORAGE OPTION FOR OAUTH ISSUE SINCE IT WAS NOT GETTING REDIRECTED.\r\n// import React from \"react\";\r\n// import { Navigate } from \"react-router-dom\";\r\n\r\n// const ProtectedRoute = ({ children, adminPage = false }) => {\r\n//   const token = localStorage.getItem('JWT_TOKEN');\r\n//   const user = JSON.parse(localStorage.getItem('USER'));\r\n\r\n//   console.log(\"ProtectedRoute: Token:\", token);\r\n//   console.log(\"ProtectedRoute: User:\", user);\r\n\r\n//   if (!token) {\r\n//     console.log(\"ProtectedRoute: No token found, redirecting to login\");\r\n//     return <Navigate to=\"/login\" />;\r\n//   }\r\n\r\n//   if (adminPage && (!user || !user.roles.includes('ADMIN'))) {\r\n//     console.log(\"ProtectedRoute: User does not have admin rights, redirecting to access denied\");\r\n//     return <Navigate to=\"/access-denied\" />;\r\n//   }\r\n\r\n//   console.log(\"ProtectedRoute: Access granted to protected route\");\r\n//   return children;\r\n// };\r\n\r\n// export default ProtectedRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,YAAY,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAClD;EACA,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGR,YAAY,CAAC,CAAC;;EAEzC;EACA,IAAI,CAACO,KAAK,EAAE;IACV,oBAAOL,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;;EAEA;EACA,IAAIN,KAAK,IAAIF,SAAS,IAAI,CAACG,OAAO,EAAE;IAClC,oBAAON,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;EAEA,OAAOT,QAAQ;AACjB,CAAC;AAACE,EAAA,CAfIH,cAAc;EAAA,QAESH,YAAY;AAAA;AAAAc,EAAA,GAFnCX,cAAc;AAiBpB,eAAeA,cAAc;;AAG7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}